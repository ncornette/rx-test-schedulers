package com.ncornette.rx.test;

import com.ncornette.rx.test.RxTestSchedulers.Logger;
import com.ncornette.rx.test.service.SpamRXService;

import org.junit.Before;
import org.junit.Test;

import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;
import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory;
import retrofit2.converter.gson.GsonConverterFactory;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'nic' at '7/11/16 2:14 PM' with Gradle 2.13
 *
 * @author nic, @date 7/11/16 2:14 PM
 */
public class RetrofitSpamServiceTest extends SpamServiceAssertions {

    protected SpamRXService spamService;
    protected RxTestSchedulers rxTestSchedulers;
    protected RxTestOkHttp rxTestOkhttp;

    @Before
    public void setUp() throws Exception {

        // testing schedulers
        rxTestOkhttp = new RxTestOkHttp();

        rxTestSchedulers = rxTestOkhttp.testSchedulers().newBuilder()
                .logger(Logger.info())
                .build();

        HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor();
        loggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BASIC);
        OkHttpClient okHttpClient = rxTestOkhttp.okHttpClient().newBuilder()
                .addInterceptor(loggingInterceptor)
                .build();

        Retrofit build = new Retrofit.Builder()
                .client(okHttpClient)
                .baseUrl(rxTestOkhttp.mockWebServer().url("/"))
                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())
                .addConverterFactory(GsonConverterFactory.create())
                .build();

        RetrofitSpamService retrofitService = build.create(RetrofitSpamService.class);

        spamService = new RetrofitSpamServiceWrapper(
                rxTestSchedulers.testBackgroundScheduler(),
                rxTestSchedulers.testForegroundScheduler(),
                retrofitService
        );

        super.setUp();
    }

    @Override
    protected RxTestSchedulers rxTestSchedulers() {
        return rxTestSchedulers;
    }

    @Override
    protected SpamRXService testClient() {
        return spamService;
    }

    @Test
    @Override
    public void assertSimpleCall() throws Exception {
        rxTestOkhttp.enqueueResponseFromFile("/spam_results_6_page=1.json");
        rxTestOkhttp.enqueueResponseFromFile("/spam_results_12_page=1.json");

        super.assertSimpleCall();
    }

    @Test
    @Override
    public void assertDistinctPageUntilChanged() throws Exception {
        rxTestOkhttp.enqueueResponseFromFile("/spam_results_6_page=1.json");
        rxTestOkhttp.enqueueResponseFromFile("/spam_results_6_page=2.json");
        rxTestOkhttp.enqueueResponseFromFile("/spam_results_6_page=3.json");
        rxTestOkhttp.enqueueResponseFromFile("/spam_results_6_page=EMPTY.json");

        super.assertDistinctPageUntilChanged();
    }

    @Test
    @Override
    public void assertLoad3Pages() throws Exception {
        rxTestOkhttp.enqueueResponseFromFile("/spam_results_6_page=1.json");
        rxTestOkhttp.enqueueResponseFromFile("/spam_results_6_page=2.json");
        rxTestOkhttp.enqueueResponseFromFile("/spam_results_6_page=3.json");
        rxTestOkhttp.enqueueResponseFromFile("/spam_results_6_page=EMPTY.json");

        super.assertLoad3Pages();
    }

    @Test
    @Override
    public void assertCompletesAtFirstEmptyList() throws Exception {
        rxTestOkhttp.enqueueResponseFromFile("/spam_results_6_page=1.json");
        rxTestOkhttp.enqueueResponseFromFile("/spam_results_6_page=2.json");
        rxTestOkhttp.enqueueResponseFromFile("/spam_results_6_page=3.json");
        rxTestOkhttp.enqueueResponseFromFile("/spam_results_6_page=EMPTY.json");

        super.assertCompletesAtFirstEmptyList();
    }

    @Test
    @Override
    public void assertCachedResult() throws Exception {
        rxTestOkhttp.enqueueResponseFromFile("/spam_results_6_page=1.json");
        rxTestOkhttp.enqueueResponseFromFile("/spam_results_6_page=2.json");
        rxTestOkhttp.enqueueResponseFromFile("/spam_results_6_page=3.json");
        rxTestOkhttp.enqueueResponseFromFile("/spam_results_6_page=EMPTY.json");

        super.assertCachedResult();
    }

    @Test
    @Override
    public void assertCachedResultAfterComplete() throws Exception {
        rxTestOkhttp.enqueueResponseFromFile("/spam_results_6_page=1.json");
        rxTestOkhttp.enqueueResponseFromFile("/spam_results_6_page=2.json");
        rxTestOkhttp.enqueueResponseFromFile("/spam_results_6_page=3.json");
        rxTestOkhttp.enqueueResponseFromFile("/spam_results_6_page=EMPTY.json");

        super.assertCachedResultAfterComplete();
    }
}
